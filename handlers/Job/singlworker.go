package Job

import (
	"animeGAN2go/bot"
	"animeGAN2go/ganserv"
	"fmt"
	"strconv"
	"strings"
	"time"
)

// –∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ—Ä–∫–µ—Ä—É
//

func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}

func StartSingleWorker() {
	fmt.Println("get file ids from queen")

	for {
		fmt.Println("tic")
		time.Sleep(3 * time.Second)
		fmt.Println("tock")

		var res = rds.Receive("parser_to_transformer")

		chatId := res["chat_id"]
		userId := res["user_id"]

		chatIdInt, _ := strconv.Atoi(chatId)

		userIdInt, _ := strconv.Atoi(userId)

		if len(res) > 0 {
			fmt.Println("–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç—Å—ã–ª–∞–µ–º")

			toQueen := make(map[string]string)

			toQueen["chat_id"] = chatId

			bot.SendMessage(chatIdInt, "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!")

			for position, fileID := range res {

				fmt.Println("Key:", position, "=>", "Element:", fileID)
				fmt.Println("do something")

				fmt.Println("–ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª id")
				filePath := bot.GetFilePath(fileID)

				fmt.Println("–ø–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
				image := bot.GetImage(filePath)

				// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
				fmt.Println("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å")
				d := ganserv.SendImageToModel(image, "version 2 (üî∫ robustness,üîª stylization)")

				var dataFromTlg MessageTypes.RespDataTlg
				if plugins.IsZeroOfUnderlyingType(d) {
					text := "–£–ø—Å, —Å –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä–æ–º —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ. –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–µ—à–µ–Ω–∏–µ–º —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã!"

					dataFromTlg = bot.SendMessage(710828013, text)
				} else {

					i := 0
					for {

						time.Sleep(1 * time.Second)

						fmt.Println("–≤ —Ü–∏–∫–ª–µ")

						data, dataQueen, queen, err := ganserv.GetQueenNumber(d.Hash)
						if !err {
							if queen {
								if dataQueen.Status == "QUEUED" {
									text := fmt.Sprintf("–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å: %s", strconv.Itoa(dataQueen.Data))
									if i == 0 {
										dataFromTlg = bot.SendMessage(710828013, text)
									} else {
										bot.EditMessage(710828013, text, int(dataFromTlg.Result.MessageId))
									}

									i++
								}
							} else {
								if data.Status == "COMPLETE" {
									//fmt.Println("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π")
									// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
									imageString := strings.Split(data.Data.Data[0], ",")[1]
									// –∫–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–∏–Ω —á–∞—Ç
									f := bot.SendPhoto(710828013, imageString)
									toQueen[position] = f
									// TODO —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É

									break
								}
							}
						} else {
							text := "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!"
							dataFromTlg = bot.SendMessage(710828013, text)
							break
						}
					}
				}

			}

			// —Ç—É—Ç –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

			fmt.Println("–æ—Ç—Å—ã–ª–∞–µ–º")

			rds.Send("transformer_to_creator", toQueen)

			pg.InsertCancelAction(userIdInt)
		} else {

			fmt.Println("nothing found")

		}

	}

}
